Index: lib/mongoosastic.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/mongoosastic.js	(date 1427621708000)
+++ lib/mongoosastic.js	(revision )
@@ -251,9 +251,8 @@
     });
   };
 
-  schema.statics.esCount = function (query, cb) {
+  schema.statics.esCount = function(query, cb) {
-    var model = this;
-    setIndexNameIfUnset(model.modelName);
+    setIndexNameIfUnset(this.modelName);
 
     if (cb == null && typeof query === 'function') {
       cb = query;
@@ -266,10 +265,10 @@
       },
       index: options.index || indexName,
       type:  options.type  || typeName
-    }
+    };
 
     esClient.count(esQuery, cb);
-  }
+  };
 
   function bulkDelete(options, cb) {
     bulkAdd({
Index: test/count-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/count-test.js	(date 1427621708000)
+++ test/count-test.js	(revision )
@@ -1,27 +1,29 @@
-var mongoose  = require('mongoose')
-  , async = require('async')
-  , esClient  = new(require('elasticsearch').Client)
-  , should    = require('should')
-  , config    = require('./config')
-  , Schema    = mongoose.Schema
-  , mongoosastic = require('../lib/mongoosastic');
+var mongoose = require('mongoose'),
+  async = require('async'),
+  config = require('./config'),
+  Schema = mongoose.Schema,
+  mongoosastic = require('../lib/mongoosastic');
 
-
 var CommentSchema = new Schema({
-    user: String
-  , post_date: {type:Date, es_type:'date'}
-  , message: {type:String}
-  , title: {type:String, es_boost:2.0}
+  user: String,
+  post_date: {type: Date, es_type: 'date'},
+  message: {type: String},
+  title: {type: String, es_boost: 2.0}
 });
 
-CommentSchema.plugin(mongoosastic);
+CommentSchema.plugin(mongoosastic, {
+  bulk: {
+    size: 2,
+    delay: 100
+  }
+});
 
 var Comment = mongoose.model('Comment', CommentSchema);
 
-describe('Count', function(){
+describe.only('Count', function() {
-  before(function(done){
+  before(function(done) {
-    mongoose.connect(config.mongoUrl, function(){
+    mongoose.connect(config.mongoUrl, function() {
-      Comment.remove(function(){
+      Comment.remove(function() {
         config.deleteIndexIfExists(['comments'], function() {
           var comments = [
             new Comment({
@@ -34,16 +36,21 @@
             })
           ];
           async.forEach(comments, function(item, cb) {
-              item.save(cb);
-            }, function() {
-              setTimeout(done, config.indexingTimeout);
-            });
-          });
+            item.save(cb);
+          }, function() {
+            setTimeout(done, config.indexingTimeout);
+          });
+        });
       });
     });
+  });
+
+  after(function() {
+    mongoose.disconnect();
+    Comment.esClient.close();
   });
 
-  it('should count a type', function(done){
+  it('should count a type', function(done) {
     Comment.esCount({
       term: {
         user: 'terry'
